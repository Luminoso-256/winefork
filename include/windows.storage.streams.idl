/*
 * Copyright 2021 Jactry Zeng for CodeWeavers
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

#ifdef __WIDL__
#pragma winrt ns_prefix
#endif

import "inspectable.idl";
import "eventtoken.idl";
import "windows.foundation.idl";

namespace Windows.Storage {
    interface IStorageFile;
}

namespace Windows.Storage.Streams {
    interface IBuffer;
    interface IBufferFactory;
    interface IBufferStatics;
    interface IContentTypeProvider;
    interface IInputStream;
    interface IInputStreamReference;
    interface IOutputStream;
    interface IRandomAccessStream;
    interface IRandomAccessStreamReference;
    interface IRandomAccessStreamReferenceStatics;
    interface IRandomAccessStreamStatics;
    interface IRandomAccessStreamWithContentType;
    runtimeclass Buffer;
    runtimeclass InMemoryRandomAccessStream;
    runtimeclass RandomAccessStream;
    runtimeclass RandomAccessStreamReference;

    declare {
        interface Windows.Foundation.Collections.IIterable<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.Collections.IIterator<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.Collections.IVectorView<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IBuffer *>;
        interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamReference *>;
        interface Windows.Foundation.AsyncOperationCompletedHandler<Windows.Storage.Streams.IRandomAccessStreamWithContentType *>;
        interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer *>;
        interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStream *>;
        interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamReference *>;
        interface Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType *>;
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        uuid(905a0fe0-bc53-11df-8c49-001e4fc686da)
    ]
    interface IBuffer : IInspectable
    {
        [propget] HRESULT Capacity([out, retval] UINT32 *value);
        [propget] HRESULT Length([out, retval] UINT32 *value);
        [propput] HRESULT Length([in] UINT32 value);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        exclusiveto(Windows.Storage.Streams.Buffer),
        uuid(71af914d-c10f-484b-bc50-14bc623b3a27)
    ]
    interface IBufferFactory : IInspectable
    {
        HRESULT Create([in, range(0x00000000, 0x7fffffff)] UINT32 capacity,
                       [out, retval] Windows.Storage.Streams.Buffer **value);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        exclusiveto(Windows.Storage.Streams.Buffer),
        uuid(e901e65b-d716-475a-a90a-af7229b1e741)
    ]
    interface IBufferStatics : IInspectable
    {
        HRESULT CreateCopyFromMemoryBuffer([in] Windows.Foundation.IMemoryBuffer *input,
                                           [out, retval] Windows.Storage.Streams.Buffer **value);
        HRESULT CreateMemoryBufferOverIBuffer([in] Windows.Storage.Streams.IBuffer *input,
                                              [out, retval] Windows.Foundation.MemoryBuffer **value);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        uuid(905a0fe1-bc53-11df-8c49-001e4fc686da),
    ]
    interface IRandomAccessStream : IInspectable
        requires Windows.Foundation.IClosable,
                 Windows.Storage.Streams.IInputStream,
                 Windows.Storage.Streams.IOutputStream
    {
        [propget] HRESULT Size([out, retval] UINT64 *value);
        [propput] HRESULT Size([in] UINT64 value);
        HRESULT GetInputStreamAt([in] UINT64 position, [out, retval] Windows.Storage.Streams.IInputStream **stream);
        HRESULT GetOutputStreamAt([in] UINT64 position, [out, retval] Windows.Storage.Streams.IOutputStream **stream);
        [propget] HRESULT Position([out, retval] UINT64 *value);
        HRESULT Seek([in] UINT64 position);
        HRESULT CloneStream([out, retval] Windows.Storage.Streams.IRandomAccessStream **stream);
        [propget] HRESULT CanRead([out, retval] boolean *value);
        [propget] HRESULT CanWrite([out, retval] boolean *value);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        uuid(33EE3134-1DD6-4E3A-8067-D1C162E8642B)
    ]
    interface IRandomAccessStreamReference : IInspectable
    {
        HRESULT OpenReadAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IRandomAccessStreamWithContentType*>** operation);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        exclusiveto(Windows.Storage.Streams.RandomAccessStreamReference),
        uuid(857309DC-3FBF-4E7D-986F-EF3B1A07A964)
    ]
    interface IRandomAccessStreamReferenceStatics : IInspectable
    {
        HRESULT CreateFromFile([in] Windows.Storage.IStorageFile* file, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
        HRESULT CreateFromUri([in] Windows.Foundation.Uri* uri, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
        HRESULT CreateFromStream([in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Windows.Storage.Streams.RandomAccessStreamReference** streamReference);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        exclusiveto(Windows.Storage.Streams.RandomAccessStream),
        uuid(524CEDCF-6E29-4CE5-9573-6B753DB66C3A)
    ]
    interface IRandomAccessStreamStatics : IInspectable
    {
        [overload("CopyAsync")] HRESULT CopyAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
        [overload("CopyAsync")] HRESULT CopySizeAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [in] UINT64 bytesToCopy, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
        HRESULT CopyAndCloseAsync([in] Windows.Storage.Streams.IInputStream* source, [in] Windows.Storage.Streams.IOutputStream* destination, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT64, UINT64>** operation);
    }


    [
        uuid(cc254827-4b3d-438f-9232-10c76bc7e038),
    ]
    interface IRandomAccessStreamWithContentType : IInspectable
        requires
            Windows.Storage.Streams.IRandomAccessStream,
            Windows.Foundation.IClosable,
            Windows.Storage.Streams.IInputStream,
            Windows.Storage.Streams.IOutputStream,
            Windows.Storage.Streams.IContentTypeProvider
    {
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        uuid(905A0FE6-BC53-11DF-8C49-001E4FC686DA)
    ]
    interface IOutputStream : IInspectable
        requires
            Windows.Foundation.IClosable
    {
        HRESULT WriteAsync([in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Windows.Foundation.IAsyncOperationWithProgress<UINT32, UINT32>** operation);
        HRESULT FlushAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        marshaling_behavior(agile),
        static(Windows.Storage.Streams.IRandomAccessStreamStatics, Windows.Foundation.UniversalApiContract, 1.0)
    ]
    runtimeclass RandomAccessStream
    {
    }

    [
        activatable(Windows.Foundation.UniversalApiContract, 1.0),
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        marshaling_behavior(agile)
    ]
    runtimeclass InMemoryRandomAccessStream
    {
        [default] interface Windows.Storage.Streams.IRandomAccessStream;
        interface Windows.Storage.Streams.IOutputStream;
        interface Windows.Foundation.IClosable;
        interface Windows.Storage.Streams.IInputStream;
    }

    [
        activatable(Windows.Storage.Streams.IBufferFactory, Windows.Foundation.UniversalApiContract, 1.0),
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        marshaling_behavior(agile),
        static(Windows.Storage.Streams.IBufferStatics, Windows.Foundation.UniversalApiContract, 1.0),
        threading(both)
    ]
    runtimeclass Buffer
    {
        [default] interface Windows.Storage.Streams.IBuffer;
    }

    [
        contract(Windows.Foundation.UniversalApiContract, 1.0),
        marshaling_behavior(agile),
        static(Windows.Storage.Streams.IRandomAccessStreamReferenceStatics, Windows.Foundation.UniversalApiContract, 1.0)
    ]
    runtimeclass RandomAccessStreamReference
    {
        [default] interface Windows.Storage.Streams.IRandomAccessStreamReference;
    }
}
